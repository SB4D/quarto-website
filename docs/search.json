[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "I’m a mathematician with roughly a decade of university level research and teaching under my belt. I also like computers and I’ve decided that this is what I want to do now.\n\nMath\nMy research area is the topology of 4-dimensional manifolds within the broader field of geometry and topology. If you’re also interested in these things, you may have seen my name on the cover of a book. You can find more about my research in the math section.\n\n\nComputers\nSince I’ve left academia, I’ve been on a deep dive into data science, machine learning, and related areas of software development. I’ve been working on a few projects that I’ll describe in more detail in the projects section.\n\n\nMusic\nMusic has always been my hobby but lately it has also served as an inspiration for coding projects.  I’m currently exploring various concepts of deep learning in the context of computer aided analysis of music and audio signals. I’ve also been getting more into digital signal processing (DSP) and music information retrieval (MIR) and this will be reflected in various posts in the my blog."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Code/Projects",
    "section": "",
    "text": "This page is a show case for some of my software projects. Source code is availabe on my GitHub page. My main programming language is Python, but I’ve also worked with Lua and a bit of C++.\n\nsb4dfritz — Tools for AVM FRITZ! Home Automation Systems\n\nProject on GitHub: github.com/SB4D/sb4dfritz \n\nsb4dfritz provides specialized functionality to interact with home automation devices connected to AVM FRITZ!Box routers. This is mainly a learning project for object oriented programming in Python and network communication using HTTP and SOAP. Originally, the communication was handled by the fritzconnection library, but I have written my own library sb4dfritzlib to remove this dependency. As a next step, I’m planning to add a browser-based frontend.\n\n\nHow did I do? — A MIDI Drum Practice Tool\nWhile I’m not a drummer myself, I picked up finger drumming for sketching songs. This brought me to Melodics, which I’ve briefly used. While I liked its concept, it was too expensive and felt too much like a toy. I wanted a real practice tool that would allow me to evaluated my finger drum performances and help me to improve my sense of rhythm and timing accuracy. As a quick fix, I developed a rudimentary implementation as an extension for REAPER written in Lua using the ReaScript API. The goal is to make this a self-contained web application using Python, FastAPI and a bit of JavaScript for the Web MIDI API.\n\n\nPython and LaTeX for Job Applications\nLet’s face it, applying for jobs is not fun. Luckily, I’m pretty good at finding enjoyable aspects in non-fun tasks. In this case, I took quite some pleasure in designing my application material whilst honing my computer skills. I was looking for a solution that is visually appealing, especially on computer screens, and easy to use. The latter meant that I wanted to separate design aspects and content as much as possible. This requirement made LaTeX a naturla choice. As a bit of eye candy I had enviosioned a subtle watermark image fading into the page, with the added personal touch of transitioning from mathematics into code.\n\nWatermark Design: To get the watermark exactly right, I wrote a Python library for image processing (based on PIL and NumPy) which offers blending and fading effects with fully customizable gradients.\nLaTeX Template Design: I then designed LaTeX templates for cover letters and CVs with my watermark embeded.\nAutomatic Document Generation: Having created the CV template, I wrote a Python script that automatically generates a LaTeX CV from data stored in a YAML file.\n\nNow all I have to do is write cover letters in plain text, keep my CV data up to date in the suitably structured YAML file , and run the scripts. No more fussing around with annyoing table structures and formatting options in Word or LaTeX.\n\n\nsbehrens4d.com — This Website\nLastly, there’s my website. I know, excatly what the world needed… Well, I felt like I needed one. In part, it’s meant to serve as an extension of my application material, so that potential employers can get a better idea of who I am and what I (can) do. The website is based on Quarto. I started with a template and added a few tweaks here and there. Two notable features:\n\nThe background image is another application of my image processing library mentioned above and references the watermark in my application material.\nSimilarly, the CV page is generated from the same YAML file used for my LaTeX CV."
  },
  {
    "objectID": "posts/making_of_homepage.html",
    "href": "posts/making_of_homepage.html",
    "title": "Made a website using Quarto",
    "section": "",
    "text": "Well, I made another website. You’re looking at it right now. While I’ve fumbled around with the good old HTML/CSS/JavaScript combo before, I’ll openly admit that I’m no expert in webdesign. This time around, I’m using Quarto. As you an see, I’ve also added a blog and I’ve registered my own domain name. If you’re interested, let me walk you through how this thing came to be."
  },
  {
    "objectID": "posts/making_of_homepage.html#making-it-happen",
    "href": "posts/making_of_homepage.html#making-it-happen",
    "title": "Made a website using Quarto",
    "section": "Making it Happen",
    "text": "Making it Happen\n\nCreating a Website with a Blog\nSetting up a website in Quarto is easy. If you’re also using VS Code, just install the Quarto software and the VS Code extension on your machine, and follow these instructions from the Quarto documentation.\nIn a nutshel, a Quarto homepage appears to you as its author as a folder structure mostly consisting of plain text files with the extention .qmd which is short for “Quarto markdown”. More on that later. In addition, there is an all-important file calle _quarto.yml which instructs the Quarto software how to render the .qmd files into HTML. Here’s what this looks like for this website (at the time of writing):\n\n\n_quarto.yml\n\nproject:\n  type: website\n  preview:\n    port: 2025\n\nwebsite:\n  title: \"Stefan Behrens | Mathematician | Deep Learner\"\n  navbar:\n    right:\n      - href: index.qmd\n        text: Home\n      - href: cv.qmd\n        text: CV\n      - href: math.qmd\n        text: Math/Research\n      - href: projects.qmd\n        text: Code/Projects\n      - href: blog.qmd\n        text: Blog\n  draft-mode: gone\n\nformat:\n  html:\n    theme:\n      - flatly\n    css: styles.css\n    toc: true\n    max-width: 800px\n    highlight-style: tango\n    embed-resources: false\n    include-in-header: _tools/sb4dlatex.html\n\nI’m not going to go into any detail, all I want to say is that this doesn’t look too complicated.\n\n\nAdding a blog\nAdding a blog is just as easy and is explained here. You just have to create a subdirectory for blog posts, say posts/, and .qmd file containing something like this:\n\n\nblog.qmd\n\n---\nlisting:\n    contents: posts\n    sort: \"date desc\"\n    type: default\n    categories: true\n    sort-ui: false\n    filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---\n\nThat’s it. These instructiosn (written in YAML again) tell Quarto everything it needs to know to render a blog page with posts correspondin to files in the posts/ directory. These can be either .qmd files or Jupyter Notebooks. More on adding content later.\n\n\nStyling with CSS\nAs I mentioned, while Quarto pages are not written in HTML, they are ultimately rendered as HTML. As you can see, my _quarto.yml references a file styles.css. This used to style the rendered HTML pages, so that you can work your CSS magic on your homepage. In my case, this isn’t much:\n\n\nstylels.css\n\n/* css styles */\n\n/* Custom page background */\nbody {\n  background-image: url(\"images/bg_main.png\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n/* CV stuff */\n.cv-entry { \n  display: block;\n}\n  .cv-entry summary {\n    color: black;\n    cursor: pointer;\n  }\n  .cv-entry .title{\n    font-size: large;\n    font-weight: bold;\n  }\n  .cv-entry .titleinfo{\n    font-size: large;\n  }\n  .cv-entry .subtitle{\n    font-style: italic;\n    margin-top: 0.1em;\n  }\n  .cv-entry .date{\n    float: right;\n  }\n  .cv-entry .details {\n    background-color: #f3f7ff;\n    border-radius: 10px;\n    margin: 0.5em 0 0 1em;\n  }\n    .cv-entry details p {\n      margin: 0 0 0 1em;\n      padding: 0;\n    }\n\nEssentially, I’m only adding a background image and a few custom styles for the CV page. But I’ll get to that.\n\n\nAdding Content\nAlright, enough about the structure. Let’s talk content.\n\nQuarto Markdown\nOne of the selling points for me was that I don’t have to write pages in HTML. I much prefer writing *this* over writing &lt;b&gt;that&lt;/b&gt;. Maybe it’s related to the German keyboard layout, but I’ve alwasy found HTML extra awkward to type. As for the Quarto markdown syntax, it’s bascially the same as the familiar markdown from GitHub and Jupyter Notebooks. It’s cerainly less flexible that HTML, but it gets the job done for basic texts. It’s also possible to use LaTeX, just as you would in Jupyter Notebooks.\n\n\nUsing HMTL in Quarto pages\nIf Quarto markdown is not flexible enough for you, the good news is that Quarto allows you to use HTML directly in the .qmd files. For the most part, you can just write it straight into the file. However, for more complicated constructs, you might have to wrap it into a raw HTML code block like this:\n```{=html}\n&lt;div class=\"cv-entry\"&gt;\n&lt;details&gt;\n    &lt;summary&gt;\n        &lt;span class=\"title\"&gt;Great Job&lt;/span&gt;\n        &lt;span class=\"date\"&gt;2024 — Present&lt;/span&gt;\n        &lt;p class=\"subtitle\"&gt;Prestigious Company — Somewhere Fancy&lt;/p&gt;\n    &lt;/summary&gt;\n&lt;div class=\"details\"&gt;\n&lt;ul&gt;\n&lt;li&gt;Awesome thing I did.&lt;/li&gt;\n&lt;li&gt;More greatness.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n&lt;/details&gt;\n&lt;/div&gt;\n```\nNaively, I expected this to work without the triple backticks. But for some reason, Quarto didn’t want to render this properly. The content wrapped in &lt;div class=\"cv-details\"&gt;...&lt;/div&gt; was displayed verbatim.\nAfter a frustrating conversation with ChatGPT, I went the classical RTFM way and found this. Turns out you have to explicitly announce to quarto that raw HTML is coming.\n\n\n\nJupyter Notebooks and Blog Posts\nWhile choosing a blogging platform, my main requirement was that I can recycle my already existing Jupyter Notebooks as blog posts with as little hassle as possible. This is where Quarto really shines. As explained here, you just have to make sure to that the first cell in your .ipynb file is “raw” and contains a suitable YAML front matter such as:\n---\ntitle: \"Made a new website using Quarto\"\nauthor: \"Stefan Behrens\"\ndate: \"8/3/2025\"\ncategories:\n  - Webdesign\n  - Quarto\n  - CSS\n---\nWith this in place, just copy the .ipynb into your blog’s posts folder and you’re good to go. Occassionally, you might have to run the entire notebook and save it.\nAlternatively, you can write blog posts as Quarto markdown .qmd files. They also need a YAML front matter as above.\n\n\nUsing LaTeX in Quarto\nAs mentioned, Quarto markdown has native LaTeX support. By default, it uses MathJax but it’s possible to use other rendering engines such as KaTeX. Since I’ve been using LaTeX for many years to write mathematical texts, I’ve gotten used to a couple of custom commands. Luckily, there are ways to use custom commands in Quarto pages. I’ve written more about this in another post."
  },
  {
    "objectID": "posts/making_of_homepage.html#getting-it-online",
    "href": "posts/making_of_homepage.html#getting-it-online",
    "title": "Made a website using Quarto",
    "section": "Getting it Online",
    "text": "Getting it Online\nRight, now that the website has everything it needs, it’s time to get it online. There are several ways to do so, both free and paid. After doing some research, I opted for the free option offered by GitHub.\n\nHosting on GitHub Pages\nGitHub offers a service called Pages which can be used to host websites within a repository. At the time of writing, it is even available with the free plan, albeit with a caveat. It works roughly like this. Say you have a repository my-repo with a directory repo_site/ containing data for a website. You can then instruct GitHub Pages to make that folder available under https://username.github.io/my-repo. However, there are some limitations:\n\nAs far as I can tell, the websites have to be static. Maybe you can play some tricks to get dynamic content going, but I don’t know.\nImportant: If you’re on GitHub’s free plan, the repository must be public from here onward!\n\n\nMethod 1: Render Locally, Upload Everything\nAssuming that you have the Quarto engine running locally, the easiest way to the get your website published on GitHub Pages.\n\nCreate a GitHub account if you don’t have one, yet.\nGet everything ready locally:\n\nAdd this to your _quarto.yml:\n\nproject:\n  # whatever you already had in this section\n  output-dir: docs\n\nMake sure you have a .gitignore file containing the line /.quarto/\nRender the project. The pages is now rendered to the subdirectory docs/. Delete the previous output directory (the default is _site/).\nClean up your project folder. Remove everything you don’t want anyone to see.\n\nPublish the project folder as a GitHub repository, e.g. my-quarto-site.\n\nAgain, if you’re on the free plan, the repository needs to be public!\n\nActivate GitHub Pages:\n\nLog into your GitHub Account, navigate to the website repository.\nGo the setting tab and navigate to the “Pages” register\nMake the following settings:\n\nBuild and Deplyment / Source -&gt; Deploy from a branch\nBuild and Deplyment / Branch -&gt; Choose branch (most likely main)\nBuild and Deplyment / Branch -&gt; Select folder docs/\nBuild and Deplyment / Branch -&gt; Click “Save”\n\n\nCheck if your page is online:\n\nNavigate to githubusername.github.io/my-quarto-site. Your page should appear.\n\n\n\n\nMethod 2: Upload Sources, Render Using GitHub Actions\nThere’s another way to do things that doesn’t require you to render your Quarto site locally. You can have it rendered on GitHub’s servers instead. However, the setup is a little more involved. Since I’m fine rendering locally, I haven’t tried this, yet.\nAnyway, here’s what ChatGPT told me about the process. Again, I haven’t tried it! I’m posting it here partly to remind myself that I wanted to try his eventually.\n\nAlright — here’s a ready-to-use GitHub Actions workflow that will build and deploy your Quarto site automatically to &gt; GitHub Pages.\nYou just need to:\n\nPut this file in your repo at .github/workflows/publish.yml.\nPush it to GitHub.\nEnable Pages to serve from the gh-pages branch (instead of /docs).\n\n\n.github/workflows/publish.yml\nname: Publish Quarto site to GitHub Pages\n\non:\n  push:\n    branches: [main]  # Build on every push to main branch\n  workflow_dispatch:   # Allow manual trigger from Actions tab\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: write   # Needed for pushing to gh-pages branch\n      pages: write\n      id-token: write\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: \"latest\"\n\n      - name: Set up Pandoc (optional if Quarto needs it)\n        uses: pandoc/actions/setup@v1\n\n      - name: Install LaTeX (optional, only if you render PDFs)\n        run: sudo apt-get install -y texlive-latex-base\n\n      - name: Render Quarto project\n        run: quarto render\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site   # This is Quarto's default output dir\n\nHow to set it up\n\nRemove output-dir: docs from _quarto.yml (so Quarto builds to _site).\nCommit this publish.yml workflow to .github/workflows/.\nIn GitHub → Settings → Pages:\n\nSource → Select Deploy from a branch.\nBranch → gh-pages (created by the workflow after first run).\n\nPush your changes to main.\nWait for the Actions workflow to finish — your site will appear at:\nhttps://&lt;your-username&gt;.github.io/&lt;your-repo&gt;/\n\n\nThat’s all for now. Once this is online, I’m planning to redirect this page to a domain which I’ve already registered. I’ll update this post."
  },
  {
    "objectID": "posts/making_of_homepage.html#to-be-continued",
    "href": "posts/making_of_homepage.html#to-be-continued",
    "title": "Made a website using Quarto",
    "section": "To Be Continued…",
    "text": "To Be Continued…"
  },
  {
    "objectID": "posts/latex_in_jupyter_notebooks.html",
    "href": "posts/latex_in_jupyter_notebooks.html",
    "title": "Custom LaTeX Commands in Jupyter Notebooks",
    "section": "",
    "text": "As a mathematician I’ve been using LaTeX for a very long time. Over the years I’ve gotten used to a number of custom macros. Now that I’m using Jupyter Notebooks more and more, I’ve been looking for a convenient way to use my commands in this setting as well. Most importantly, I’ve internalized the commands below to an extent that I will type them even if a try not to.\nBy the way, if you’re wondering why I’m using \\providecommand instead of \\newcommand or \\renewcommand, I’ve found the former to be less error prone since it doesn’t try to overwrite or override already existing commands. And it gets the job done just as well for me."
  },
  {
    "objectID": "posts/latex_in_jupyter_notebooks.html#things-that-work-from-the-get-go",
    "href": "posts/latex_in_jupyter_notebooks.html#things-that-work-from-the-get-go",
    "title": "Custom LaTeX Commands in Jupyter Notebooks",
    "section": "Things that work from the get-go",
    "text": "Things that work from the get-go\nBefore I continue, I should say that Visual Studio Code is my editor of choice. This matters, because it uses KaTeX as a rendering engine for LaTeX code in Jupyter Notebooks. KaTeX is not a full LaTeX distribution and only supports a small selection of commands. The full list is available here. A few of “my” commands work from the get-go:\n\n\\R gives \\(\\R\\)\n\\Z gives \\(\\Z\\)\n\\N gives \\(\\N\\)\n\\set{...} serves as \\{...\\} and gives \\(\\set{...}\\)\n\\Set{...} serves as \\left\\{...\\right\\} and curly brackets with auto-adapted size\n\nHowever, \\Q and \\C do not give \\(\\mathbb Q\\) and \\(\\mathbb C\\)! While I don’t use \\Q that much, not having \\C is a problem."
  },
  {
    "objectID": "posts/latex_in_jupyter_notebooks.html#adding-custom-latex-commands-in-a-jupyter-notebook",
    "href": "posts/latex_in_jupyter_notebooks.html#adding-custom-latex-commands-in-a-jupyter-notebook",
    "title": "Custom LaTeX Commands in Jupyter Notebooks",
    "section": "Adding custom LaTeX commands in a Jupyter Notebook",
    "text": "Adding custom LaTeX commands in a Jupyter Notebook\nFortunately, it is possible to define custom LaTeX macros in a Jupter notebook. You just have to wrap the usual \\newcommand{}[]{} or providecommand{}[]{}in dollar signs as in the following example:\n$\\newcommand{\\C}{\\mathbb C}$\nNow I can write $\\C$ instead of $\\mathbb C$!\n$\\providecommand{\\mc}[1]{\\mathcal{#1}}$\nNow I can write $\\mc H$ instead of $\\mathcal{H}$.\n\\(\\providecommand{\\C}{\\mathbb C}\\) \\(\\providecommand{\\mc}[1]{\\mathcal{#1}}\\) Indeed \\C and \\mc H now give \\(\\C\\) and \\(\\mc H\\). Once declared, the macros are available in the entire notebook; they are not limited to the cell in which they are defined.\nIndeed, this is a new cell and \\C still gives \\(\\C\\) although this was defined in a different cell. I could now even use this command before it was defined, that is, in cells above the one in which it is defined. However, this would produce an error the next time I open the notebook.\n\\(\\providecommand{\\Q}{\\mathbb{Q}}\\) There’s another minor catch. When using \\newcommand as in $\\newcommand{\\Q}{\\mathbb{Q}}$, say, make sure to put it in the top of the cell before any text. If you put it somewhere else (e.g. between paragraphs), then everything will be fine the first time you execute the cell, but starting from the second execution you’ll get this error:\nParseError: KaTeX parse error: \\newcommand{\\Q} attempting to redefine \\Q; use \\renewcommand\nAs I’ve already mentioned, I generally prefer to use \\providecommand{} as it’s less error prone. This also holds in this case. $\\providecommand{\\Q}{\\mathbb{Q}}$ will simply define \\Q the first time around and do nothing any time after that, no matter where it was placed in the code.\nTo summarize, the best practice is as in LaTeX: * Put all your macros in the beginning of the document before the main text. * Try to use \\providecommand instead of \\newcommand or \\renewcommand whenever you can.\nFrom now on, the first markdown cell in my Jupyter Notebooks will start something like this:\n# Title (or no title...)\n$$\n% Numbers\n\\providecommand{\\N}{\\mathbb{N}} % natural numbers\n\\providecommand{\\Z}{\\mathbb{Z}} % integers\n\\providecommand{\\Q}{\\mathbb{Q}} % rational numbers\n\\providecommand{\\R}{\\mathbb{R}} % real numbers\n\\providecommand{\\C}{\\mathbb{C}} % complex numbers\n\n% Math font styles\n\\providecommand{\\mbb}[1]{\\mathbb{#1}}\n\\providecommand{\\mc}[1]{\\mathcal{#1}}\n\\providecommand{\\mf}[1]{\\mathfrak{#1}}\n\n% Arrows\n\\providecommand{\\xra}[1]{\\xrightarrow{#1}}\n\n% Useful things\n\\providecommand{\\inv}{^{-1}} % inverses\n\\providecommand{\\del}{\\partial}\n$$\n\nText goes here...\n\nLoading custom LaTeX macros from a file into a Jupyter Notebook?\nAs I’ve said, over the years I’ve accumulated a set selection of custom macros and I’ve put them into a custom package. It would be great if I could use it in my Jupyter Notebooks as well. Unfortunately, it’s not as simple as writing $\\include[my_package]$. Neither can I simply put my commands in a file my_commands.tex and write $\\input{my_commands.tex}$.\nI’ll look into this another time and if I find a solution, I’ll update the article."
  },
  {
    "objectID": "math.html",
    "href": "math.html",
    "title": "Math/Research",
    "section": "",
    "text": "Welcome to the math section! This page is mainly written for other mathematicians. If you’re looking for layman’s accounts on mathematics, check if my blog has something for you."
  },
  {
    "objectID": "math.html#research-interests",
    "href": "math.html#research-interests",
    "title": "Math/Research",
    "section": "Research Interests",
    "text": "Research Interests\nMy field of research is low dimensional topology with a focus on 3- and 4-dimensional manifolds and applications of gauge theoretic invariants. I’m particularly interested in the interplay of topology, geometry, analysis, and algebra in relation to intersection forms of smooth 4-manifolds.\nI also enjoy thinking about purely structural features of the aforementioned gauge theoretic invariants. I’ve been exploring this from the perspective of equivariant stable homotopy theory which I’ve found to be a fascinating (but also confusing) subject in its own right.\nIf you think of mathematics as a folder tree, here’s roughly where to locate me and my contributions:\nMathemactics\n└── Pure Mathematics\n    └── Geometry & Topology\n        └── Topology of Manifolds\n            └── Low Dimensional Topology\n                └── 3- and 4-dimensional Manifolds\n                    ├── Topological 4-manifolds\n                    │   └── Freedman's Work\n                    ├── Smooth 4-Manifolds\n                    │   ├── Diagrammatic Descriptions\n                    │   └── Donaldson's Theorem and its Generalizations\n                    └── Applications of Gauge Theory\n                        ├── Heegaard-Floer Theory\n                        │   └── Correction Terms and their Applications\n                        └── Seiberg-Witten Theory\n                            ├── Froyshov Invariants and their generalizations\n                            └── Seiberg-Witten-Floer Homotopy types\n\nOngoing Projects\n\n\n\n\n\n\nGeneralized Froyshov Invariants\n\n\n\n\n\nThis a most joint work with Tyrone Cutler. We’ve been developing a unified framework to study Froyshov-type invariants derived from the Seiberg-Witten-Floer homotopyes of rational homology 3-spheres and equivariant cohomology theories. We highlight the roles of Euler classes and orientations of \\(G\\)-representations where \\(G\\) is either the circle group \\(\\TT=U(1)\\) or its normalizer \\(Pin(2)\\) in \\(SU(2)\\). Along the way, we give proofs of various folklore statements about the use of incomplete universes for the groups.\n\n\n\n\n\n\n\n\n\nSeiberg-Witten-Floer Homotopy Types for General 3-Manifolds\n\n\n\n\n\nThis a long-term project joint with Thomas Kragh and Alice Hedenlund. Seiberg-Witten-Floer (SWF) homotopy types are supposed to refine monopole Floer homology. This is reasonably well understood for rational homology 3-spheres by the work of Manolescu and Lidman-Manolecu. Moreover, Khandhawit-Lin-Sasahira and Sasahira-Stoffregen have constructed SWF homotopy types for more general 3-manifolds, but the relation to monopole Floer homology is only conjectural. Another loose end is the functoriality with respect to 4-dimensional cobordisms. We set out to construct SWF homotopy types for general closed 3-manifolds which allow a clean framwork to discuss cobordism maps and folding-unfolding phenomena related to local coefficients in monopole Floer homology. The key is a suitable notion of twisted parameterized equivariant homotopy types which we are developing."
  },
  {
    "objectID": "math.html#publications",
    "href": "math.html#publications",
    "title": "Math/Research",
    "section": "Publications",
    "text": "Publications\n\nBooks\n\n\n\n\n\n\nThe Disk Embedding Theorem (joint with Boldizsar Kalmar, Min-Hoon Kim, Mark Powell and Arunima Ray)\n\n\n\n\n\nA detailed account on Freedman’s work on the 4-dimensional version of the Poincaré conjecture and its applications to the theory of topological 4-manifolds.\n\n\n\n\n\nArticles\n\n\n\n\n\n\nThe monopole h-invariants from a topological perspective (Preprint)\n\n\n\n\n\nAbstract: We study the monopole h-invariants of 3-manifolds from a topological perspective based on Lidman and Manolescu’s description of monopole Floer homology in terms of Seiberg-Witten-Floer homotopy types. We investigate the possible dependence on the choice of coefficients and give proofs of several properties of the h-invariants which are well known to experts, but hard to track down in the literature.\n\n\n\n\n\n\n\n\n\nHeegaard Floer correction terms, with a twist (joint with Marco Golla)\n\n\n\n\n\nAbstract: We use Heegaard Floer homology with twisted coefficients to define numerical invariants for arbitrary closed 3-manifolds equipped torsion spin structures, generalising the correction terms (or \\(d\\)-invariants) defined by Ozsváth and Szabó for integer homology 3-spheres and, more generally, for 3-manifolds with standard \\(\\mathrm{HF}^\\infty\\). Our twisted correction terms share many properties with their untwisted analogues. In particular, they provide restrictions on the topology of 4-manifolds bounding a given 3-manifold.\n\n\n\n\n\n\n\n\n\nClassification of boundary Lefschetz fibrations over the disc (joint with Gil Cavalcanti and Ralph Klaasse)\n\n\n\n\n\nAbstract: We show that a four-manifold admits a boundary Lefschetz fibration over the disc if and only if it is diffeomorphic to \\(S^1 \\times S^3\\# n \\overline{\\mathbb{C} P^2}\\), \\(\\# m\\mathbb{C} P^2 \\#n\\overline{\\mathbb{C} P^2}\\) or \\(\\# m (S^2 \\times S^2)\\). Given the relation between boundary Lefschetz fibrations and stable generalized complex structures, we conclude that the manifolds \\(S^1 \\times S^3\\# n \\overline{\\mathbb{C} P^2}\\), \\(\\#(2m+1)\\mathbb{C} P^2 \\#n\\overline{\\mathbb{C} P^2}\\) and \\(\\# (2m+1) S^2 \\times S^2\\) admit stable structures whose type change locus has a single component and are the only four-manifolds whose stable structure arise from boundary Lefschetz fibrations over the disc.\n\n\n\n\n\n\n\n\n\nElimination of cusps in dimension 4 and its applications (joint with Kenta Hayano)\n\n\n\n\n\nAbstract: Several new combinatorial descriptions of closed 4-manifolds have recently been introduced in the study of smooth maps from 4-manifolds to surfaces. These descriptions consist of simple closed curves in a closed, orientable surface and these curves appear as so called vanishing sets of corresponding maps. In the present paper we focus on homotopies canceling pairs of cusps so called cusp merges. We first discuss the classification problem of such homotopies, showing that there is a one-to-one correspondence between the set of homotopy classes of cusp merges canceling a given pair of cusps and the set of homotopy classes of suitably decorated curves between the cusps. Using our classification, we further give a complete description of the behavior of vanishing sets under cusp merges in terms of mapping class groups of surfaces. As an application, we discuss the uniqueness of surface diagrams, which are combinatorial descriptions of 4-manifolds due to Williams, and give new examples of surface diagrams related with Lefschetz fibrations and Heegaard diagrams.\n\n\n\n\n\n\n\n\n\nOn 4-Manifolds, Folds and Cusps\n\n\n\n\n\nAbstract: We study simple wrinkled fibrations, a variation of the simplified purely wrinkled fibrations introduced by Williams, and their combinatorial description in terms of surface diagrams. We show that simple wrinkled fibrations induce handle decompositions on their total spaces which are very similar to those obtained from Lefschetz fibrations. The handle decompositions turn out to be closely related to surface diagrams and we use this relationship to interpret some cut-and-paste operations on 4-manifolds in terms of surface diagrams. This, in turn, allows us classify all closed 4-manifolds which admit simple wrinkled fibrations of genus one, the lowest possible fiber genus."
  },
  {
    "objectID": "math.html#teaching",
    "href": "math.html#teaching",
    "title": "Math/Research",
    "section": "Teaching",
    "text": "Teaching"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "Mathematician (Ph.D.) with 5+ years of unversity level research and teaching\nSkilled in Python, SQL and cloud technologies\nPassionate about math, coding, data and deep learning\nKnowledgable about digital signal processing, acoustics, and music"
  },
  {
    "objectID": "cv.html#summary",
    "href": "cv.html#summary",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "Mathematician (Ph.D.) with 5+ years of unversity level research and teaching\nSkilled in Python, SQL and cloud technologies\nPassionate about math, coding, data and deep learning\nKnowledgable about digital signal processing, acoustics, and music"
  },
  {
    "objectID": "cv.html#research-work-experience",
    "href": "cv.html#research-work-experience",
    "title": "Curriculum Vitae",
    "section": "Research & Work Experience",
    "text": "Research & Work Experience\n\n\n    \n        Assistant Professor\n        (Akademischer Rat auf Zeit)\n        2017 — 2024\n        Bielefeld University — Bielefeld, Germany\n    \n\n\nPlanned and taught over 20 courses with consistenly positive student feedback\nSupervised and evaluated four M.Sc. and three B.Sc. theses\nSeveral scientific publications, including a popular monograph (\"The Disk Embedding Theorem\", Behrens et al, OUP 2021)\nResearch projects on the geometry and topology of 3- and 4-dimensional manifolds, focussing on applications of Seiberg-Witten theory\nInternational and national research collaborations\n\n\n\n\n\n\n\n    \n        Postdoctoral Researcher\n        \n        2015 — 2017\n        Utrecht University — Utrecht, Netherlands\n    \n\n\nResearch and teaching in mathematics\nPublished several research articles\nCo-supervised B.Sc. thesis\nAttended international conferences\n\n\n\n\n\n\n\n    \n        ERC Postdoctoral Fellow\n        \n        2013 — 2015\n        Alfréd Rényi Institute of Mathamtics — Budapest, Hungary\n    \n\n\nResearch in mathematics\nPublished several papers\nAttended international conferences"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Curriculum Vitae",
    "section": "Education",
    "text": "Education\n\n\n    \n        Ph.D. in Mathematics\n        (Dr. rer. nat.)\n        05/2014\n        University of Bonn — Bonn, Germany\n    \n\n\nThesis: Surface Diagrams of Smooth 4-Manifolds (supervised by Prof. Dr. Peter Teichner)\ngraduated magna cum laude\nIMPRS Fellow at the Max-Planck-Institute for Mathematics\n\n\n\n\n\n\n\n    \n        M.S. in Mathematics\n        (Dipl. Math.)\n        09/2009\n        University of Bonn — Bonn, Germany\n    \n\n\nThesis: The L²-Stokes theorem on certain incomplete manifolds (supervised by Prof. Dr. Matthias Lesch)\nMathematical specialization: Analysis on manifolds, stochastic analysis, algebraic geometry, topology\nChristian-Kuhlemann-Foundation Award for outstanding undergraduate achievements (at Leibniz University Hannover)"
  },
  {
    "objectID": "cv.html#certificates",
    "href": "cv.html#certificates",
    "title": "Curriculum Vitae",
    "section": "Certificates",
    "text": "Certificates\n\n\n    \n        AI and Machine Learning Essentials with Python Specialization\n        \n        06/2025\n        University of Pennsylvania / Coursera\n    \n\n\nCertificate URLs:\nView Certificate\nView Course Details\n\nSubjects Covered: \nSearch algorithms (informed, uninformed, A*)\nBasic statiscics (probability distributions, central limit theorem, confidence intervals)\nMachine learning algorithms (regression, SVMs)\nDeep learning (neural networks)\n\nTechnologies Used: \nPython\nscikit-learn\nPyTorch\n\n\n\n\n\n\n\n\n    \n        IBM Data Science Professional Certificate\n        \n        05/2025\n        IBM / Coursera\n    \n\n\nCertificate URLs:\nView Certificate\nView Course Details\n\nSubjects Covered: \nData science methodology (from business requirements to model deployment)\nData collection and preparation\nData analyis and modelling\nModel evaluation and deployment\nMachine learning algorithms (prediction, classification, clustering)\nData visualization (plots, dashboards, presentations)\n\nTechnologies Used: \nPython\nSQL\npandas\nscikit-learn\nmatplotlib\nseaborn\nPlotly Dash\nBeautifulSoup (webscraping)\nREST APIs\n\n\n\n\n\n\n\n\n    \n        Google Cybersecurity Professional Certificate\n        \n        04/2025\n        Google / Coursera\n    \n\n\nCertificate URLs:\nView Certificate\nView Course Details\n\nSubjects Covered: \nNIST frameworks\nOWASP security principles\nNetwork models (TCP/IP, OSI)\nNetwork procotols (TCP, UDP, HTTP(S))\nNetwork monitoring\nLog analysis\nThreat detection\nIncident response\nIdentity and access management\nEncryption\nAuthentication\nAuthorization\nCloud security basics\n\nTechnologies Used: \nLinux\nPython\nSQL\nWireshark\ntcpdump\n\n\n\n\n\n\n\n\n    \n        Python 3 Programming Specialization\n        \n        02/2025\n        University of Michigan / Coursera\n    \n\n\nCertificate URLs:\nView Certificate\nView Course Details\n\nSubjects Covered: \nProgramming fundamentals\nObject oriented programming\nData collection and processing\n\nTechnologies Used: \nPython\nJupyterLab\nHTTP protocol\nREST APIs"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Made a website using Quarto\n\n\n\nWebdesign\n\nQuarto\n\n\n\n\n\n\n\n\n\nAug 15, 2025\n\n\nStefan Behrens\n\n\n\n\n\n\n\n\n\n\n\n\nCustom LaTeX Commands in Quarto Pages\n\n\n\nQuarto\n\nLaTeX\n\nJavaScript\n\n\n\n\n\n\n\n\n\nAug 9, 2025\n\n\nStefan Behrens\n\n\n\n\n\n\n\n\n\n\n\n\nCustom LaTeX Commands in Jupyter Notebooks\n\n\n\nJupyter\n\nLaTeX\n\n\n\n\n\n\n\n\n\nAug 5, 2025\n\n\nStefan Behrens\n\n\n\n\n\n\n\n\n\n\n\n\nChanging the default figure size in matplotlib Pyplot\n\n\n\nPython\n\nmatplotlib\n\nJupyter\n\nlittle tricks\n\n\n\n\n\n\n\n\n\nAug 1, 2025\n\n\nStefan Behrens\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Licensing for This Repository",
    "section": "",
    "text": "The written content, images, and other non-code materials in this repository are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License.\nYou are free to: - Share — copy and redistribute the material in any medium or format - Adapt — remix, transform, and build upon the material for any purpose, even commercially\nUnder the following terms: - Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.\nFull license text: https://creativecommons.org/licenses/by/4.0/\n\n\n\n\nThe code portions of this repository are licensed under the MIT License:\nMIT License\nCopyright (c) [YEAR] [YOUR NAME]\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "LICENSE.html#website-content-text-figures-media",
    "href": "LICENSE.html#website-content-text-figures-media",
    "title": "Licensing for This Repository",
    "section": "",
    "text": "The written content, images, and other non-code materials in this repository are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License.\nYou are free to: - Share — copy and redistribute the material in any medium or format - Adapt — remix, transform, and build upon the material for any purpose, even commercially\nUnder the following terms: - Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.\nFull license text: https://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "LICENSE.html#website-code-quarto-configuration-scripts-templates-styles",
    "href": "LICENSE.html#website-code-quarto-configuration-scripts-templates-styles",
    "title": "Licensing for This Repository",
    "section": "",
    "text": "The code portions of this repository are licensed under the MIT License:\nMIT License\nCopyright (c) [YEAR] [YOUR NAME]\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "posts/latex_macros_in_quarto_pages.html",
    "href": "posts/latex_macros_in_quarto_pages.html",
    "title": "Custom LaTeX Commands in Quarto Pages",
    "section": "",
    "text": "This is companion post to this one where I wrote about using custom LaTeX commands in Jupyter notebooks.\nI’ll briefly go into the backstory again. I’ve used LaTeX for over a decade as a mathematician and I’ve gotten used to a certain set of custom LaTeX commands that I assembled into a custom LaTeX package. Let’s call it mycommands.sty for demonstrational purposes. Recently, I’ve been making more frequent use of Jupyter Notebooks and also Quarto - the latter mostly for this homepage/blog combo. Unfortunately, it doesn’t seem to be possible at this point to load LaTeX packages in Jupyter or Quarto. So I was looking for ways to have my favorite commands available.\nIdeally, I wanted to have a solution that mimics the behavior of \\usepackage{mycommands} in Quarto. Before I get into Quart and it’s markup syntax, here’s an excerpt from my custom LaTeX package:\nBy the way, I’m using \\providecommand instead of \\newcommand to avoid conflicts.\nLike LaTeX, Quarto pages are plain text files and only the extension .qmd makes them recognizable as Quarto files. Quarto has its own markup syntax and, while LaTeX support is built in, the LaTeX code is generally not handled by a full LaTeX distribution. Instead it is rendered uning engines such as MathJax or KaTeX which only provide a limited set of commands. Luckily, it is possible to define custom commands in a Quarto page."
  },
  {
    "objectID": "posts/latex_macros_in_quarto_pages.html#simple-latex-macros-in-quarto-files",
    "href": "posts/latex_macros_in_quarto_pages.html#simple-latex-macros-in-quarto-files",
    "title": "Custom LaTeX Commands in Quarto Pages",
    "section": "Simple LaTeX Macros in Quarto Files",
    "text": "Simple LaTeX Macros in Quarto Files\nSay we want to have some fun with the quaternions and want to write them as \\(\\mathbb{H}\\). If the symbol only appears ones or twice, writing \\mathbb{H} would arguably be the best solution. But it’s used constantly, it would be much better to declare an abbreviation that’s easier to type and also easier on the eyes.\nIn LaTeX I would a custom command \\newcommand{\\HH}{\\mathbb{H}} so that I only have to type \\HH to produce \\(\\mathbb{H}\\). In Quarto files, you can essentially do the same thing, you just have to wrap it in a math environment like this:\n`$\\newcommand{\\HH}{\\mathbb{H}}$`\n\\(\\newcommand{\\HH}{H}\\)\nYou can put this anywhere in your Quarto page, the only restriction is that the code needs to have an empty line above and below.\nAs in LaTeX, it is good practice to declare all your custom commands in the beginning of the file before the main text. The cleanest way to do this in a Quarto file is to begin the file like this:\n---\nauthor: Som Won\ntitle: LaTeX Custom Commands in Quarto Pages\n---\n:::{.hidden}\n$$\n\\newcommand{\\HH}{\\mathbb{H}}\n\\newcommand{\\anothercommand}{\\mathfrak{AnotherCommand}}\n$$\n:::\nWhile the above solution is easy enough, it has some severe drawbacks. First, it only works on a per file basis, which is not very convenient. Second, the :::{.hidden} ... ::: wrapper is supposed to make sure nothing inside gets rendered. Well, it doesn’t, really…\nWarning! At first, I naively copied the original code from mycommands.sty into a :::{.hidden} $$ ...$$  ::: wrapper. I put this code in a separate .qmd file and made sure the code get included in every page using Quarto’s include features. This worked fine for pages and blog posts, but for some reason the preview text on the blog home page contained this garbage:\n$ % Numbers % natural numbers % integers % rational numbers % real numbers % complex numbers % quaternions\nApparently, the problem is related to LaTeX-style comments in the mycommands.sty code. So I removed the comments, but the blog home page still contains $ as an artefact (or $$, I forgot).\nBottom line, this method doesn’t quite cut it for me. Luckily, I found a better way that I’ll explain next."
  },
  {
    "objectID": "posts/latex_macros_in_quarto_pages.html#loading-latex-macros-from-a-javascript-.js-file",
    "href": "posts/latex_macros_in_quarto_pages.html#loading-latex-macros-from-a-javascript-.js-file",
    "title": "Custom LaTeX Commands in Quarto Pages",
    "section": "Loading LaTeX Macros from a JavaScript .js file",
    "text": "Loading LaTeX Macros from a JavaScript .js file\nAfter trying a few things out, I settled on the following solution. The first thing to understand is that Quarto uses MathJax as a default rendering engine for LaTeX in websites. If you want, you can override this and use something like KaTeX instead (which is what VS Code uses for rendering LaTeX in Jupyter Notebooks).\nWith this understood, the main task is to tell MathJax and/or KaTeX (or what ever else you want to use) about your custom commands. Here’s what I did for this website:\n\nInclude the LaTeX commands in a JavaScript file /_tools/sb4dlatex.js (code below).\nCreate a one-line HTML file /_tools/sb4dlatex.html referencing the script file (code below).\nAdd the following line to _quarto.yml:\n\nformat:\n  html:\n    include-in-header: _tools/sb4dlatex.html\nNow the promised code followed by further explanation. First, the HTML bit:\n\n\n/_tools/sb4dlatex.html\n\n&lt;script src=\"/_tools/sb4dlatex.js\"&gt;&lt;/script&gt;\n\nThe line include-in-header: _tools/sb4dlatex.html in _quarto.yml makes sure that the line above gets included in every page header. Finally, the JavaScript bit:\n\n\n/_tools/sb4dlatex.js\n\n// Define custom LaTeX commands\nconst custom_latex_commands = {\n    // Numbers\n    N: \"\\\\mathbb{N}\",  // natural numbers\n    Z: \"\\\\mathbb{Z}\",  // integers\n    Q: \"\\\\mathbb{Q}\",  // rational numbers\n    R: \"\\\\mathbb{R}\",  // real numbers\n    C: \"\\\\mathbb{C}\",  // complex numbers\n    HH: \"\\\\mathbb{H}\", // quaternions\n    // Math font styles\n    mbb: [\"\\\\mathbb{#1}\", 1],\n    mc: [\"\\\\mathcal{#1}\", 1],\n    mf: [\"\\\\mathfrak{#1}\", 1],\n    // Math font decoration\n    bs: [\"\\\\boldsymbol{#1}\", 1],\n    wt: [\"\\\\widetilde{#1}\", 1],\n    // Arrows\n    xra: [\"\\\\xrightarrow{#1}\", 1],\n    // Useful things\n    inv: \"^{-1}\", // inverses\n    del: \"\\\\partial\", // partial derivatives\n    // Special notation\n    TT: \"\\\\mathbb{T}\", // circle group\n};\n// Make custom LaTeX commands available for MathJax\nwindow.MathJax = {\n    tex: {\n        macros: custom_latex_commands\n    }\n};\n// Make custom LaTeX commands available for KaTeX\nwindow.katexMacros = custom_latex_commands;\n\nNot too bad, right? While the syntax is not entirely self-explanatory, comparing it with the LaTeX code in mycommands.sty should give you an idea how it works. Let’s look at two commands in detail.\nLaTex:\n\\providecommand{\\HH}{\\mathbb{H}} % quaternions\n\\providecommand{\\mc}[1]{\\mathcal{#1}}\nJavaScript (in combination with KaTeX for brevity):\nconst latex_commands = {\n  HH: \"\\\\mathbb{H}\", // quaternions\n  mc: [\"\\\\mathcal{#1}\", 1],\n};\nwindow.katexMacros = latex_commands;\nFirst, let’s think about what’s happening here. \\providecommand{\\HH}{\\mathbb{H}} tells your LaTeX compiler to treat the string \\HH as \\mathbb{H}. Abstractly, we can think of these two strings as a key-value pair. Observe that \\providecommand{&lt;key&gt;}{&lt;value&gt;} is called individually for every key-value pair. In contrast, the Javascript solution records all key-value pairs in a dictionary (aka JavaScript object) and then passes that dictionary to the LaTeX interpreter (using window.katexMacros = latex_commands; for KaTeX).\nSecond, the syntactic differences are mainly the backslashes, the double quotes, and the handling of arguments for \\mc{&lt;arg&gt;}. Note that the dictionary values (i.e. the LaTeX commands to be replaced) are written as strings in double quotes and the single backslash \\ needs to be escaped as \\\\. The dictioary keys (i.e. the designated LaTeX shortuts), however, are written in plain without quotes or backslashes. Lastly, the add-arguments syntax should be reasonably self-explanatory. The number of arguments needs to be specified, albeit in a slightly different place as in LaTeX, and the arguments are called as #1, #2, … inside the LaTeX string.\nI’ll leave it at that for the moment. You may rightfully ask: “But what about optional arguments, possibly with default values?” I’m aware of the omission. I’ll get back to this later when I actually need such a construct. For now, I’ll keep things simple."
  },
  {
    "objectID": "posts/pyplot_figsize_default.html",
    "href": "posts/pyplot_figsize_default.html",
    "title": "Changing the default figure size in matplotlib Pyplot",
    "section": "",
    "text": "I often use matplotlib’s pyplot for quick plots while I’m trying things out in Jupyter Notebooks. I’m rarely ever happy with the default size of the plots and it gets annoying to change it manually for every single plot. Luckily, there’s an easy way to change this on a per document basis.\nAssuming that pyplot is imported as plt, the default figure size is store in a dictionary entry plt.rcParams['figure.figsize']. Changing its value sets the default figure size for the current document.\n\nimport matplotlib.pyplot as plt\n\nfactory_default_figsize = plt.rcParams['figure.figsize']\nprint(\"Factory setting for figsize:\", factory_default_figsize)\n\nFactory setting for figsize: [6.4, 4.8]\n\n\n\n## Example 1: Factory default figsize\nimport numpy as np\n\nx = np.linspace(0,10,1000)\ny = np.sin(x**2)\n\nplt.plot(x, y)\n\n\n\n\n\n\n\n\n\n##  Example 2: Custom default figsize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# set a custom default figsize\ncustom_default_figsize = (15,5)\nplt.rcParams['figure.figsize'] = custom_default_figsize\n\nx = np.linspace(0,10,1000)\ny = np.sin(x**2)\n\nplt.plot(x, y)\n\n\n\n\n\n\n\n\nLastly, it is worth mentioning that the dictionary plt.rcParams contains many other pyplot default setting (if not all of them). As I understand it, it is populated with the factory defaults everytime pyplot is being imported. Importantly, changing plt.rcParams['figure.figsize'] does not overwrite the factory settings! They are safely stored somewhere else. So doing this in one document does not affect any other."
  }
]